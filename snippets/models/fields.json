{
  "fk": {
    "prefix": "fk",
    "body": "${1:field_name} = models.ForeignKey(${2:ModelName}, on_delete=models.${3|CASCADE,PROTECT,SET_NULL,SET_DEFAULT,SET(),DO_NOTHING|})",
    "description": "Field - models.ForeignKey ( A many-to-one relationship.on_delete will become a required argument in Django 2.0. In older versions it defaults to CASCADE)"
  },
  "m2m": {
    "prefix": "m2m",
    "body": "${1:field_name} = models.ManyToManyField(${2:ModelName})",
    "description": "Field - models.ManyToManyField ( A many-to-many relationship)"
  },
  "marray": {
    "prefix": "marray",
    "body": "${1:field_name} = models.ArrayField()",
    "description": "Field - models.ArrayField (PostgreSQL specific model fields*.A field for storing lists of data)"
  },
  "mauto": {
    "prefix": "mauto",
    "body": "${1:field_name} = models.AutoField($2)",
    "description": "Field - models.AutoField (An IntegerField that automatically increments according to available IDs)"
  },
  "mbigauto": {
    "prefix": "mbigauto",
    "body": "${1:field_name} = models.BigAutoField($2)",
    "description": "Field - models.BigAutoField ([New in Django 1.10.]A 64-bit integer, much like an AutoField)"
  },
  "mbigint": {
    "prefix": "mbigint",
    "body": "${1:field_name} = models.BigIntegerField($2)",
    "description": "Field - models.BigIntegerField (A 64-bit integer, much like an IntegerField)"
  },
  "mbinary": {
    "prefix": "mbinary",
    "body": "${1:field_name} = models.BinaryField($2)",
    "description": "Field - models.BinaryField (A field to store raw binary data)"
  },
  "mbool": {
    "prefix": "mbool",
    "body": "${1:field_name} = models.BooleanField($2)",
    "description": "Field - models.BooleanField (A true/false field)"
  },
  "mchar": {
    "prefix": "mchar",
    "body": "${1:field_name} = models.CharField($2, max_length=${3:50})",
    "description": "Field - models.CharField"
  },
  "mcoseint": {
    "prefix": "mcoseint",
    "body": "${1:field_name} = models.CommaSeparatedIntegerField($2)",
    "description": "Field - models.CommaSeparatedIntegerField (This field is deprecated since 1.9 in favor of CharField with validators)"
  },
  "mdate": {
    "prefix": "mdate",
    "body": "${1:field_name} = models.DateField($2, auto_now=${3:False}, auto_now_add=${4:False})",
    "description": "Field - models.DateField (A date, represented in Python by a datetime.date instance)"
  },
  "mdatetime": {
    "prefix": "mdatetime",
    "body": "${1:field_name} = models.DateTimeField($2, auto_now=${3:False}, auto_now_add=${4:False})",
    "description": "Field - models.DateTimeField (A date, represented in Python by a datetime.datetime instance)"
  },
  "mdecimal": {
    "prefix": "mdecimal",
    "body": "${1:field_name} = models.DecimalField($2, max_digits=${3:5}, decimal_places=${4:2})",
    "description": "Field - models.DecimalField (A fixed-precision decimal number, represented in Python by a Decimal instance)"
  },
  "mduration": {
    "prefix": "mduration",
    "body": "${1:field_name} = models.DurationField($2)",
    "description": "Field - models.DurationField (A field for storing periods of time - modeled in Python by timedelta)"
  },
  "memail": {
    "prefix": "memail",
    "body": "${1:field_name} = models.EmailField($2, max_length=${3:254})",
    "description": "Field - models.EmailField (A CharField that checks that the value is a valid email address)"
  },
  "mfile": {
    "prefix": "mfile",
    "body": "${1:field_name} = models.FileField($2, upload_to=${3:None}, max_length=${4:100})",
    "description": "Field - models.FileField (A file-upload field)"
  },
  "mfilepath": {
    "prefix": "mfilepath",
    "body": "${1:field_name} = models.FilePathField($2, path=${3:None}, match=${4:None}, recursive=${5:recursive}, max_length=${6:100})",
    "description": "Field - models.FilePathField (A CharField whose choices are limited to the filenames in a certain directory on the filesystem)"
  },
  "mfloat": {
    "prefix": "mfloat",
    "body": "${1:field_name} = models.FloatField($2)",
    "description": "Field - models.FloatField (A floating-point number represented in Python by a float instance)"
  },
  "mgenericip": {
    "prefix": "mgenericip",
    "body": "${1:field_name} = models.GenericIPAddressField($2, protocol=${3:'both'}, unpack_ipv4=${4:False})",
    "description": "Field - models.GenericIPAddressField (An IPv4 or IPv6 address, in string format)"
  },
  "mimg": {
    "prefix": "mimg",
    "body": "${1:field_name} = models.ImageField($2, upload_to=${3:None}, height_field=${4:None}, width_field=${5:None}, max_length=${5:100})",
    "description": "Field - models.ImageField (Inherits all attributes and methods from FileField, but also validates that the uploaded object is a valid image)"
  },
  "mint": {
    "prefix": "mint",
    "body": "${1:field_name} = models.IntegerField($2)",
    "description": "Field - models.IntegerField (An integer. Values from -2147483648 to 2147483647 are safe in all databases supported by Django)"
  },
  "mip": {
    "prefix": "mip",
    "body": "${1:field_name} = models.IPAddressField($2)",
    "description": "Field - models.IPAddressField (This field has been deprecated since version 1.7 in favor of GenericIPAddressField)"
  },
  "mjson": {
    "prefix": "mjson",
    "body": "${1:field_name} = models.JSONField()",
    "description": "Field - models.JSONField (PostgreSQL specific model fields*.[New in Django 1.11.]A field for storing JSON encoded data)"
  },
  "mnullbool": {
    "prefix": "mnullbool",
    "body": "${1:field_name} = models.NullBooleanField($2)",
    "description": "Field - models.NullBooleanField (Like a BooleanField, but allows NULL as one of the options)"
  },
  "mo2o": {
    "prefix": "mo2o",
    "body": "${1:field_name} = models.OneToOneField(${2:ModelName}, on_delete=models.${3|CASCADE,PROTECT,SET_NULL,SET_DEFAULT,SET(),DO_NOTHING|})",
    "description": "Field - models.OneToOneField (A one-to-one relationship.on_delete will become a required argument in Django 2.0. In older versions it defaults to CASCADE)"
  },
  "mphone": {
    "prefix": "mphone",
    "body": "${1:field_name} = models.PhoneNumberField($2)",
    "description": "Field - models.PhoneNumberField (external package: django-phonenumber-field)"
  },
  "mposint": {
    "prefix": "mposint",
    "body": "${1:field_name} = models.PositiveIntegerField($2)",
    "description": "Field - models.PositiveIntegerField (Like an IntegerField, but must be either positive or zero ()"
  },
  "mpossmallint": {
    "prefix": "mpossmallint",
    "body": "${1:field_name} = models.PositiveSmallIntegerField($2)",
    "description": "Field - models.PositiveSmallIntegerField (Like a PositiveIntegerField, but only allows values under a certain (database-dependent) point)"
  },
  "mslug": {
    "prefix": "mslug",
    "body": "${1:field_name} = models.SlugField($2)",
    "description": "Field - models.SlugField (A slug is a short label for something, containing only letters, numbers, underscores or hyphens. They’re generally used in URLs)"
  },
  "msmallint": {
    "prefix": "msmallint",
    "body": "${1:field_name} = models.SmallIntegerField($2)",
    "description": "Field - models.SmallIntegerField (Like an IntegerField, but only allows values under a certain (database-dependent) point)"
  },
  "mstore": {
    "prefix": "mstore",
    "body": "${1:field_name} = models.HStoreField()",
    "description": "Field - models.HStoreField (PostgreSQL specific model fields*.A field for storing key-value pairs. The Python data type used is a dict)"
  },
  "mtext": {
    "prefix": "mtext",
    "body": "${1:field_name} = models.TextField($2)",
    "description": "Field - models.TextField (A large text field)"
  },
  "mtime": {
    "prefix": "mtime",
    "body": "${1:field_name} = models.TimeField($2, auto_now=${4:False}, auto_now_add=${5:False})",
    "description": "Field - models.TimeField (A time, represented in Python by a datetime.time instance)"
  },
  "murl": {
    "prefix": "murl",
    "body": "${1:field_name} = models.URLField($2, max_length=${3:200})",
    "description": "Field - models.URLField (A CharField for a URL)"
  },
  "musstate": {
    "prefix": "musstate",
    "body": "${1:field_name} = models.USStateField($2)",
    "description": "Field - models.USStateField (external package: django-localflavor)"
  },
  "muuid": {
    "prefix": "muuid",
    "body": "${1:field_name} = models.UUIDField($2)",
    "description": "Field - models.UUIDField (A field for storing universally unique identifiers. Uses Python’s UUID class)"
  },
  "mxml": {
    "prefix": "mxml",
    "body": "${1:field_name} = models.XMLField($2)",
    "description": "Field - models.XMLField (All uses of XMLField can be replaced with TextField. This field has been deprecated since version 1.3)"
  }
}
